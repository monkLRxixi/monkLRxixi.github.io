import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.gI2xCOxE.js";const l="/assets/image-20230917160948981.clsE5UhR.png",o="/assets/image-20230917172315125.UPDqps-0.png",m=JSON.parse('{"title":"C","description":"","frontmatter":{},"headers":[],"relativePath":"lang/c/C笔记.md","filePath":"lang/c/C笔记.md"}'),e={name:"lang/c/C笔记.md"},c=p(`<h1 id="c" tabindex="-1">C <a class="header-anchor" href="#c" aria-label="Permalink to &quot;C&quot;">​</a></h1><blockquote><p>关键字<strong>sizeof()</strong>;</p></blockquote><p>计算类型或者变量所占空间的大小</p><blockquote><p>输入函数-<strong><u><em>scanf()</em></u></strong>; <u>后面的括号可以省略</u></p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//示例,&amp;为取地址的意思，必须加上</span></span>
<span class="line"><span style="color:#B392F0;">scanf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//示例,&amp;为取地址的意思，必须加上</span></span>
<span class="line"><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>求字符串的长度-<strong><u><em>strlen()</em></u></strong>;</p><p>是string length 的结合</p></blockquote><h2 id="部分关键字" tabindex="-1">部分关键字 <a class="header-anchor" href="#部分关键字" aria-label="Permalink to &quot;部分关键字&quot;">​</a></h2><p><strong><u><em>extern</em></u></strong> ——声明外部符号，声明作用</p><p><strong><u><em>register</em></u></strong> ——寄存器关键字</p><p><code>添加register后，表达的是建议把修饰的变量放到寄存器当中，放不放入寄存器取决于编译器</code></p><p><strong><u><em>signed</em></u></strong> ——有符号的</p><p><strong><u><em>unsigned</em></u></strong> ——无符号的</p><p><strong><u><em>struct</em></u></strong> ——结构体关键字</p><p><code>描述的是复杂抽象事物，描述复杂类型，类似java中的对象</code></p><p><strong><u><em>typedef</em></u></strong> 类型重定义，也叫类型重命名</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//TODO typedef</span></span>
<span class="line"><span style="color:#6A737D;">//类型重定义，类型重命令，通俗点就是另起个名字</span></span>
<span class="line"><span style="color:#6A737D;">//例如下列就是将 unsigned int 重命名为u_int ，效用等同于 unsigned int</span></span>
<span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">u_int</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//下列两段代码的效用是一模一样的</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">u_int</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//TODO typedef</span></span>
<span class="line"><span style="color:#6A737D;">//类型重定义，类型重命令，通俗点就是另起个名字</span></span>
<span class="line"><span style="color:#6A737D;">//例如下列就是将 unsigned int 重命名为u_int ，效用等同于 unsigned int</span></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">u_int</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//下列两段代码的效用是一模一样的</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">u_int</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p><strong><u><em>static</em></u></strong> 静态的</p><p>作用：</p></blockquote><ul><li>修饰局部变量--改变的是局部变量的生命周期**<u><em>(本质上是改变了变量的存储类型)</em></u>**</li><li>修饰全局变量--修饰全局变量，<u>使得这个全局变量只能在自己的源文件(.c)内部中使用</u>，其它源文件无法使用，extern也无法调用</li><li>修饰函数--static修饰函数，使得函数只能在自己所在的源文件内部使用，不能在其他源文件内部使用（<strong><u><em>本质上，static是将函数的外部链接属性变成了内部链接属性，和static修饰全局变量一样</em></u></strong>）</li></ul><p><img src="`+l+`" alt="image-20230917160948981"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong><u><em>union</em></u></strong> 联合体</p><p><strong><u><em>volatile</em></u></strong></p><h2 id="预处理指令" tabindex="-1">预处理指令 <a class="header-anchor" href="#预处理指令" aria-label="Permalink to &quot;预处理指令&quot;">​</a></h2><blockquote><p><strong>#define</strong>预处理指令</p></blockquote><p><strong><u><em>定义常量</em></u></strong></p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//define 定义标识符常量</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MAX</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,MAX);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//define 定义标识符常量</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MAX</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,MAX);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong><u><em>定义宏</em></u></strong></p><p>宏是一种模式替换</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//define 定义宏</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ADD</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) ((x)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">(y))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">ADD</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//define 定义宏</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ADD</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#24292E;">) ((x)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">(y))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">ADD</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>#include</strong>预处理指令</p><h2 id="比较重要的东西-必看" tabindex="-1">比较重要的东西，必看 <a class="header-anchor" href="#比较重要的东西-必看" aria-label="Permalink to &quot;比较重要的东西，必看&quot;">​</a></h2><blockquote><p><strong><u><em>常量定义</em></u></strong></p><ul><li>字面常量</li><li>**<u><em>const</em></u>**修饰的常变量</li><li>**<u><em>#define</em></u>**定义的标识符常量</li><li>**<u><em>enum枚举</em></u>**常量</li></ul><p><strong><u><em>全局变量</em></u></strong>：在其他源文件内部可以被使用，是以为全局变量具有外部链接属性</p><p>但是被static修饰之后，就变成了内部链接属性，其他源文件就不能链接到这个静态的全局变量了</p></blockquote><h2 id="指针初识" tabindex="-1">指针初识 <a class="header-anchor" href="#指针初识" aria-label="Permalink to &quot;指针初识&quot;">​</a></h2><p><strong><u><em>指针就是地址</em></u></strong></p><p><strong><u><em>指针的大小是相同的，指针需要多大空间，取决于地址的存储需要</em></u></strong></p><p><strong><u><em>指针大小在32位平台是4个字节，64位平台是8个字节</em></u></strong></p><blockquote><p><strong><u><em>内存</em></u></strong></p></blockquote><p>内存是电脑上特别重要的存储器，计算机中所有的程序的运行都是在内存中进行的。</p><p>所以为了有效的使用内存，就把内存划分成一个个小的内存单元，每个内存单元的大小是**<u><em>1个字节</em></u>**</p><p>为了能够有效的访问到内存的每个单元，就给内存单元进行了编号，这些编号被称为该**<u><em>内存单元的地址</em></u>**</p><blockquote><p><strong><u><em>指针变量</em></u></strong></p><p>标志 (*)符号</p><p>示例如下:</p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//a在内存中要分配空间的 - 4 个字节</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%p\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a);</span><span style="color:#6A737D;">//%p专门用来打印地址的</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> pa </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a;</span><span style="color:#6A737D;">//pa是用来存放地址的，在c语言中pa叫是指针变量</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//* 说明 pa是指针变量</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//int 说明pa执行的对象是int类型的</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//a在内存中要分配空间的 - 4 个字节</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%p\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a);</span><span style="color:#6A737D;">//%p专门用来打印地址的</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> pa </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a;</span><span style="color:#6A737D;">//pa是用来存放地址的，在c语言中pa叫是指针变量</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//* 说明 pa是指针变量</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//int 说明pa执行的对象是int类型的</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p><strong><u><em>解引用操作</em></u></strong></p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">num;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  //解引用操作，对pa解引用,使得p通过自身存储的地址找到num，并间接改变了num的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,num);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">num;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  //解引用操作，对pa解引用,使得p通过自身存储的地址找到num，并间接改变了num的值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,num);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+o+`" alt="image-20230917172315125"></p><h2 id="结构体" tabindex="-1">结构体 <a class="header-anchor" href="#结构体" aria-label="Permalink to &quot;结构体&quot;">​</a></h2><blockquote><p>结构体是C语言中特别重要的知识点，结构体使得C语言有能力描述复杂类型，相当于java中的对象</p><p>通过struct关键字,结构体可以让C语言创建新的类型出来</p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//例如创建学生类型</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Stu</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> score;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Stu s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">85.5</span><span style="color:#E1E4E8;"> };</span><span style="color:#6A737D;"> //结构体的创建和初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%lf\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, s.name, s.age, s.score);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Stu</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> ps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">s;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%lf\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ps).name, (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ps).age, (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ps).score);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//第三种打印方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%lf\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, ps-&gt;age, ps-&gt;age, ps-&gt;score);</span><span style="color:#6A737D;">//箭头左边一定是结构体指针本身</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//例如创建学生类型</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Stu</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> score;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Stu s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">85.5</span><span style="color:#24292E;"> };</span><span style="color:#6A737D;"> //结构体的创建和初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%lf\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, s.name, s.age, s.score);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Stu</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> ps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%lf\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ps).name, (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ps).age, (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ps).score);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//第三种打印方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%lf\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, ps-&gt;age, ps-&gt;age, ps-&gt;score);</span><span style="color:#6A737D;">//箭头左边一定是结构体指针本身</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="eof" tabindex="-1">EOF <a class="header-anchor" href="#eof" aria-label="Permalink to &quot;EOF&quot;">​</a></h2><p><strong><u><em>—— end -of file 文件结束标志</em></u></strong></p><h2 id="一些函数" tabindex="-1">一些函数 <a class="header-anchor" href="#一些函数" aria-label="Permalink to &quot;一些函数&quot;">​</a></h2><h3 id="getchar" tabindex="-1">&gt; <strong><u><em>getchar()</em></u></strong> <a class="header-anchor" href="#getchar" aria-label="Permalink to &quot;&gt; **&lt;u&gt;*getchar()*&lt;/u&gt;**&quot;">​</a></h3><blockquote><p>——1.获取当前输入的字符</p><p>——2.清理缓冲区</p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ch;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((ch)</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">getchar</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> EOF){</span><span style="color:#6A737D;">//当字符不是EOF时，获取当前输入的字符</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">putchar</span><span style="color:#E1E4E8;">(ch);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ch;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">((ch)</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">getchar</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> EOF){</span><span style="color:#6A737D;">//当字符不是EOF时，获取当前输入的字符</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">putchar</span><span style="color:#24292E;">(ch);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//清理缓冲区里的多个字符</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((tmp</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">getchar</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    ;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#6A737D;">//清理缓冲区里的多个字符</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">((tmp</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">getchar</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    ;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="putchar" tabindex="-1">&gt; <strong><u><em>putchar()</em></u></strong> <a class="header-anchor" href="#putchar" aria-label="Permalink to &quot;&gt; **&lt;u&gt;*putchar()*&lt;/u&gt;**&quot;">​</a></h3><blockquote><p>——输出一个字符到屏幕上</p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ch;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">((ch)</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">getchar</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> EOF){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">putchar</span><span style="color:#E1E4E8;">(ch);</span><span style="color:#6A737D;">//输出一个字符到屏幕上</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ch;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">((ch)</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">getchar</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> EOF){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">putchar</span><span style="color:#24292E;">(ch);</span><span style="color:#6A737D;">//输出一个字符到屏幕上</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="strlen" tabindex="-1">&gt; <strong><u><em>strlen()</em></u></strong> <a class="header-anchor" href="#strlen" aria-label="Permalink to &quot;&gt; **&lt;u&gt;*strlen()*&lt;/u&gt;**&quot;">​</a></h3><blockquote><p>——统计字符串长度</p></blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,61),r=[c];function t(E,y,i,u,d,b){return n(),a("div",null,r)}const g=s(e,[["render",t]]);export{m as __pageData,g as default};
